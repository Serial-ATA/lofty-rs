from pathlib import Path
from requests import get
import xml.etree.ElementTree as ET

MATROSKA_TAGS_XML = "https://github.com/ietf-wg-cellar/matroska-specification/raw/refs/heads/master/matroska_tags.xml"
TAGNAME_RS = Path("../lofty/src/ebml/tag/tag_name.rs")
FILE_HEADER = """// !!! DO NOT EDIT !!!
// !!! THIS FILE IS GENERATED BY `scripts/update-matroska-tags.py` !!!

use std::borrow::Cow;"""
TAGNAME_ENUM = """/// A list of all specified Matroska tag names
///
/// The tag list is available [here](https://matroska.org/technical/tagging.html). It provides
/// descriptions and expected data types of each tag.
#[rustfmt::skip]
#[allow(missing_docs)]
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
pub enum TagName {
"""


def camel_case(s):
	return ''.join(x for x in s.title() if x.isalnum())


def get_tags(elem):
	all_tags = []
	for tag_def in elem:
		tag = {'name': tag_def.get('name'), 'class': tag_def.get('class')}

		all_tags.append(tag)
	return all_tags


def main():
	matroska_tags_def = get(MATROSKA_TAGS_XML).text
	root = ET.fromstring(matroska_tags_def)

	tags = get_tags(root[1])

	file_content = FILE_HEADER + "\n\n" + TAGNAME_ENUM
	current_class = ""
	for tag in tags:
		if tag['class'] != current_class:
			current_class = tag['class']
			file_content += f"\n\t// {current_class}\n"
		file_content += f"\t{camel_case(tag['name'])},\n"
	file_content += '}'

	file_content += "\n\n"

	file_content += """impl From<TagName> for Cow<'static, str> {
	fn from(value: TagName) -> Self {
		match value {"""
	for tag in tags:
		file_content += f"\n\t\t\tTagName::{camel_case(tag['name'])} => Cow::Borrowed(\"{tag['name']}\"),"
	file_content += "\n\t\t}\n\t}\n}"

	with open(TAGNAME_RS, 'w+') as f:
		f.write(file_content)


if __name__ == "__main__":
	main()
